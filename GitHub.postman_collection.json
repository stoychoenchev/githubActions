{
	"info": {
		"_postman_id": "d44d0fae-f95f-4a24-a005-1bc0e5c79496",
		"name": "GitHub",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44837668",
		"_collection_link": "https://stoychoenchev-316073.postman.co/workspace/Stoycho-Enchev's-Workspace~92b41316-9459-4025-8b14-ab79ade639b6/collection/44837668-d44d0fae-f95f-4a24-a005-1bc0e5c79496?action=share&source=collection_link&creator=44837668"
	},
	"item": [
		{
			"name": "Get all Repos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/user/repos",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const repo_name = pm.environment.get(\"repo_name\");\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected fullname\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(repo_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected visibility of repo\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.private).to.eql(false);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().getTime();\r",
							"let repoName = `AutoRepo_${timestamp}`;\r",
							"let updatedName = `UpdatedRepo_${timestamp}`;\r",
							"\r",
							"pm.environment.set(\"repo_name\", repoName);\r",
							"pm.environment.set(\"updatedrepo_name\", updatedName);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.github+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{repo_name}}\",\r\n    \"description\": \"This is your first repo, created through the Github API\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": false,\r\n    \"is_template\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/user/repos",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const updatedrepo_name = pm.environment.get(\"updatedrepo_name\");\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Response contains expected visibility of repo\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.name).to.eql(updatedrepo_name);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.github+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{updatedrepo_name}}\",\r\n    \"description\": \"This is your first repository\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": true,\r\n    \"has_issues\": true,\r\n    \"has_projects\": true,\r\n    \"has_wiki\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{owner}}/{{repo_name}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a specific Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const defaultrepo = pm.environment.get(\"defaultrepo\");\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the name is equal to the defaultrepo variable value.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(defaultrepo)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/{{owner}}/{{defaultrepo}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{defaultrepo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a specific Repo Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.environment.unset(\"repo_name\");\r",
							"pm.environment.unset(\"updatedrepo_name\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/{{owner}}/{{updatedrepo_name}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{updatedrepo_name}}"
					]
				}
			},
			"response": []
		}
	]
}